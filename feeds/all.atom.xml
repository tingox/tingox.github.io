<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Just a blog</title><link href="https://tingox.github.io/" rel="alternate"></link><link href="https://tingox.github.io/feeds/all.atom.xml" rel="self"></link><id>https://tingox.github.io/</id><updated>2018-05-25T01:59:38+02:00</updated><entry><title>git - more to learn</title><link href="https://tingox.github.io/git-more-to-learn.html" rel="alternate"></link><published>2018-05-25T01:59:38+02:00</published><updated>2018-05-25T01:59:38+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2018-05-25:/git-more-to-learn.html</id><summary type="html">&lt;p&gt;For some reason, the submodule ("output") had a detached head, and no matter how much I tried&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule init
git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the HEAD was still detached. In the end, I just changed into the output directory and did a &lt;code&gt;git checkout master&lt;/code&gt; - the existing content was going to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;For some reason, the submodule ("output") had a detached head, and no matter how much I tried&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git submodule init
git submodule update
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the HEAD was still detached. In the end, I just changed into the output directory and did a &lt;code&gt;git checkout master&lt;/code&gt; - the existing content was going to be flushed away by Pelican anyway. That worked nicely.&lt;/p&gt;</content></entry><entry><title>Slides with Markdown</title><link href="https://tingox.github.io/slides-with-markdown.html" rel="alternate"></link><published>2018-05-24T23:54:28+02:00</published><updated>2018-05-24T23:54:28+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2018-05-24:/slides-with-markdown.html</id><summary type="html">&lt;p&gt;I should check out &lt;a href="https://github.com/adamzap/landslide" title="Landslide"&gt;Landslide&lt;/a&gt;, &lt;a href="https://yhatt.github.io/marp/" title="Marp"&gt;Marp&lt;/a&gt;, &lt;a href="https://pandoc.org/" title="pandoc"&gt;pandoc&lt;/a&gt;, &lt;a href="https://github.com/jacksingleton/hacker-slides" title="Hacker Slides"&gt;Hacker Slides&lt;/a&gt; and other Markdown-powered slide generators.
Not my idea, I read the article &lt;a href="https://opensource.com/article/18/5/markdown-slide-generators"&gt;4 Markdown-powered slide generators&lt;/a&gt; by Scott Nesbitt. All inspiration comes from there.&lt;/p&gt;
&lt;p&gt;Landslide is (mostly) Python which is nice. Marp is an &lt;a href="http://electron.atom.io/"&gt;Electron&lt;/a&gt; app, so a bit "heavier" on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I should check out &lt;a href="https://github.com/adamzap/landslide" title="Landslide"&gt;Landslide&lt;/a&gt;, &lt;a href="https://yhatt.github.io/marp/" title="Marp"&gt;Marp&lt;/a&gt;, &lt;a href="https://pandoc.org/" title="pandoc"&gt;pandoc&lt;/a&gt;, &lt;a href="https://github.com/jacksingleton/hacker-slides" title="Hacker Slides"&gt;Hacker Slides&lt;/a&gt; and other Markdown-powered slide generators.
Not my idea, I read the article &lt;a href="https://opensource.com/article/18/5/markdown-slide-generators"&gt;4 Markdown-powered slide generators&lt;/a&gt; by Scott Nesbitt. All inspiration comes from there.&lt;/p&gt;
&lt;p&gt;Landslide is (mostly) Python which is nice. Marp is an &lt;a href="http://electron.atom.io/"&gt;Electron&lt;/a&gt; app, so a bit "heavier" on requirements, pandoc looks complicated, and Hacker Slides is an app for &lt;a href="https://sandstorm.io/"&gt;Sandstorm&lt;/a&gt; and &lt;a href="https://oasis.sandstorm.io/"&gt;Sandstorm Oasis&lt;/a&gt; so "heavy" again.&lt;/p&gt;
&lt;p&gt;This article is the first on this blog written and published from my FreeBSD workstation, I just installed Pelican and cloned the github repo. It works in the same way as on Linux, except that I use 'gmake' instead of 'make'. Nice!&lt;/p&gt;</content></entry><entry><title>Github cheatsheets</title><link href="https://tingox.github.io/github-cheatsheets-.html" rel="alternate"></link><published>2018-02-27T15:24:59+01:00</published><updated>2018-02-27T15:24:59+01:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2018-02-27:/github-cheatsheets-.html</id><summary type="html">&lt;p&gt;There are two slightly different git "cheat sheets" that you can download from Github, one &lt;a href="https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf"&gt;blue&lt;/a&gt; and 
one &lt;a href="https://education.github.com/git-cheat-sheet-education.pdf"&gt;green&lt;/a&gt; in color. The blue one refers to Github Training while the green one refers to Github Education.
Also, conetents and wording is slightly different between them. Still, they are both useful …&lt;/p&gt;</summary><content type="html">&lt;p&gt;There are two slightly different git "cheat sheets" that you can download from Github, one &lt;a href="https://services.github.com/on-demand/downloads/github-git-cheat-sheet.pdf"&gt;blue&lt;/a&gt; and 
one &lt;a href="https://education.github.com/git-cheat-sheet-education.pdf"&gt;green&lt;/a&gt; in color. The blue one refers to Github Training while the green one refers to Github Education.
Also, conetents and wording is slightly different between them. Still, they are both useful.&lt;/p&gt;</content></entry><entry><title>Progress on Windows</title><link href="https://tingox.github.io/progress-on-windows-.html" rel="alternate"></link><published>2018-02-13T17:20:53+01:00</published><updated>2018-02-13T17:20:53+01:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2018-02-13:/progress-on-windows-.html</id><summary type="html">&lt;p&gt;Ok, I have figured out how to get date the Makefile in Windows, using powershell and a powershell script.
The script is simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;get-date -UFormat &amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;yes, that is all. From the Makefile, I run it as &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;powershell -File .\ScriptDate.ps1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the Makefile fragment looks …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Ok, I have figured out how to get date the Makefile in Windows, using powershell and a powershell script.
The script is simple&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;get-date -UFormat &amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;yes, that is all. From the Makefile, I run it as &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;powershell -File .\ScriptDate.ps1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;the Makefile fragment looks like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;DATE := $(shell powershell -File .\ScriptDate.ps1)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;very satisfying to finally figure this out.&lt;/p&gt;
&lt;p&gt;The problem with extra dashes ('-') still exists, the only improvement I have managed is to remove the dash in front.&lt;/p&gt;</content></entry><entry><title>Output first</title><link href="https://tingox.github.io/output-first.html" rel="alternate"></link><published>2018-02-12T17:07:53+01:00</published><updated>2018-02-12T17:07:53+01:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2018-02-12:/output-first.html</id><summary type="html">&lt;p&gt;As the original article says; you have to commit and push the output directory &lt;em&gt;before&lt;/em&gt; pushing the source files.
Don't forget it again!&lt;/p&gt;</summary><content type="html">&lt;p&gt;As the original article says; you have to commit and push the output directory &lt;em&gt;before&lt;/em&gt; pushing the source files.
Don't forget it again!&lt;/p&gt;</content></entry><entry><title>Pelican on Windows</title><link href="https://tingox.github.io/-pelican-on-windows-.html" rel="alternate"></link><published>2018-02-12T16:15:01+01:00</published><updated>2018-02-12T16:15:01+01:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2018-02-12:/-pelican-on-windows-.html</id><summary type="html">&lt;p&gt;Installing Pelican on Windows is quite easy. You need &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; of course, then it is just 'pip install pelican' followed 
by 'pip install MarkDown' and Pelican is installed. All this from &lt;a href="https://en.wikipedia.org/wiki/PowerShell"&gt;PowerShell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, my setup uses a Makefile (originally I set up this under Linux). So I need make, the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Installing Pelican on Windows is quite easy. You need &lt;a href="https://www.python.org/"&gt;Python&lt;/a&gt; of course, then it is just 'pip install pelican' followed 
by 'pip install MarkDown' and Pelican is installed. All this from &lt;a href="https://en.wikipedia.org/wiki/PowerShell"&gt;PowerShell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, my setup uses a Makefile (originally I set up this under Linux). So I need make, the Makefile needs sed and tr
and perhaps date. &lt;a href="http://gnuwin32.sourceforge.net/"&gt;GnuWin&lt;/a&gt; to the rescue, it has packages for &lt;a href="http://gnuwin32.sourceforge.net/packages/make.htm"&gt;make&lt;/a&gt;, &lt;a href="http://gnuwin32.sourceforge.net/packages/sed.htm"&gt;sed&lt;/a&gt; and &lt;a href="http://gnuwin32.sourceforge.net/packages/coreutils.htm"&gt;coreutils&lt;/a&gt; (which contains tr).&lt;/p&gt;
&lt;p&gt;There are some things I haven't got working, like date. The date command from GnuWin coreutils package is installed, when I run
it from a powershell (the same command as in my Makefile, it works. If I enable it in the Makefile, make hangs.
Another issue is that make generates content filenames with prefixed and postfixed with dashes ('-'), even if the Makefile code
to generate a slug works. If the slug is 'this-is-a-test", the filename will be '-this-is-a-test-.md' and I don't know why yet.&lt;/p&gt;</content></entry><entry><title>Lack of news</title><link href="https://tingox.github.io/lack-of-news.html" rel="alternate"></link><published>2017-11-29T14:06:50+01:00</published><updated>2017-11-29T14:06:50+01:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2017-11-29:/lack-of-news.html</id><summary type="html">&lt;p&gt;The lack of news here just mirrors the fact that I am busy doing other things. Nothing to worry about.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The lack of news here just mirrors the fact that I am busy doing other things. Nothing to worry about.&lt;/p&gt;</content></entry><entry><title>Markup - MarkDown</title><link href="https://tingox.github.io/markup-markdown.html" rel="alternate"></link><published>2017-09-04T11:19:22+02:00</published><updated>2017-09-04T11:19:22+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2017-09-04:/markup-markdown.html</id><summary type="html">&lt;p&gt;Most static site generators defaults to &lt;a href="https://daringfireball.net/projects/markdown/"&gt;MarkDown&lt;/a&gt; as a markup language. So I better learn it. There is a &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown Cheatsheet&lt;/a&gt; available. Wikipedia:&lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Most static site generators defaults to &lt;a href="https://daringfireball.net/projects/markdown/"&gt;MarkDown&lt;/a&gt; as a markup language. So I better learn it. There is a &lt;a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet"&gt;Markdown Cheatsheet&lt;/a&gt; available. Wikipedia:&lt;a href="https://en.wikipedia.org/wiki/Markdown"&gt;Markdown&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>another markup option - wikicreole</title><link href="https://tingox.github.io/another-markup-option-wikicreole.html" rel="alternate"></link><published>2017-09-01T12:56:41+02:00</published><updated>2017-09-01T12:56:41+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2017-09-01:/another-markup-option-wikicreole.html</id><summary type="html">&lt;p&gt;The &lt;a href="http://www.wikicreole.org/" title="Wikicreole"&gt;wikicreole&lt;/a&gt; markup system looks almost like the markup that &lt;a href="http://mediawiki.org/" title="Mediawiki"&gt;Mediawiki&lt;/a&gt; uses, which is nice. 
I have used mediawiki a lot, so this is one syntax that I am familiar with. Wikicreole exists as a plugin for Pelican as 
well &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/creole_reader"&gt;Creole Reader&lt;/a&gt;.&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;a href="http://www.wikicreole.org/" title="Wikicreole"&gt;wikicreole&lt;/a&gt; markup system looks almost like the markup that &lt;a href="http://mediawiki.org/" title="Mediawiki"&gt;Mediawiki&lt;/a&gt; uses, which is nice. 
I have used mediawiki a lot, so this is one syntax that I am familiar with. Wikicreole exists as a plugin for Pelican as 
well &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/creole_reader"&gt;Creole Reader&lt;/a&gt;.&lt;/p&gt;</content></entry><entry><title>Easy to break</title><link href="https://tingox.github.io/easy-to-break.html" rel="alternate"></link><published>2017-08-31T17:36:18+02:00</published><updated>2017-09-01T15:06:22+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2017-08-31:/easy-to-break.html</id><summary type="html">&lt;p&gt;Pelican works, but it seems a bit fragile. 'make html' works all the time, but 'make publish' followed by the necessary 
git commands doesn't always give the expected result. Sometimes only the text is published, and lacks the "theme", 
which creates a bad look.&lt;/p&gt;
&lt;p&gt;2017-09-01: and it broke again today …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Pelican works, but it seems a bit fragile. 'make html' works all the time, but 'make publish' followed by the necessary 
git commands doesn't always give the expected result. Sometimes only the text is published, and lacks the "theme", 
which creates a bad look.&lt;/p&gt;
&lt;p&gt;2017-09-01: and it broke again today. Not sure why, I must figure that out.&lt;/p&gt;
&lt;p&gt;2017-09-01: ok, it turns out that &lt;code&gt;SITEURL&lt;/code&gt; in &lt;code&gt;publishconf.py&lt;/code&gt; had http, not https in the URL.
        Changing that made all the difference.&lt;/p&gt;</content></entry><entry><title>Second post</title><link href="https://tingox.github.io/second-post.html" rel="alternate"></link><published>2017-08-31T14:01:49+02:00</published><updated>2017-08-31T14:01:49+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2017-08-31:/second-post.html</id><summary type="html">&lt;p&gt;This is just the second blog post. The inspiration for doing this came from this &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/" title="Make a Github Pages blog with Pelican"&gt;article&lt;/a&gt;. Other options for static
website generators are &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; written in Ruby, &lt;a href="http://hyde.github.io/"&gt;Hyde&lt;/a&gt; written in Python, 
&lt;a href="https://hexo.io/"&gt;Hexo&lt;/a&gt; written in Javascript (nodeJS), &lt;a href="http://gohugo.io/"&gt;Hugo&lt;/a&gt; written in Go, 
&lt;a href="https://github.com/eudicots/Cactus"&gt;Cactus&lt;/a&gt; written in Python and using Django, &lt;a href="https://www.getlektor.com/"&gt;Lektor&lt;/a&gt; 
in Python …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This is just the second blog post. The inspiration for doing this came from this &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/" title="Make a Github Pages blog with Pelican"&gt;article&lt;/a&gt;. Other options for static
website generators are &lt;a href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; written in Ruby, &lt;a href="http://hyde.github.io/"&gt;Hyde&lt;/a&gt; written in Python, 
&lt;a href="https://hexo.io/"&gt;Hexo&lt;/a&gt; written in Javascript (nodeJS), &lt;a href="http://gohugo.io/"&gt;Hugo&lt;/a&gt; written in Go, 
&lt;a href="https://github.com/eudicots/Cactus"&gt;Cactus&lt;/a&gt; written in Python and using Django, &lt;a href="https://www.getlektor.com/"&gt;Lektor&lt;/a&gt; 
in Python and using Jinja2, &lt;a href="http://www.sphinx-doc.org/"&gt;Sphinx&lt;/a&gt; written in Python and using &lt;a href="http://docutils.sourceforge.net/rst.html" title="reStructuredText"&gt;rST&lt;/a&gt; as markup language,
&lt;a href="https://www.getnikola.com/"&gt;Nikola&lt;/a&gt; written in Python it uses rST as default markup, but supports many more. It also has 
a &lt;a href="https://plugins.getnikola.com/v7/mediawiki/" title="Nikola mediawiki smc.mw"&gt;plugin&lt;/a&gt; for Mediawiki markup. Lots more on &lt;a href="https://www.staticgen.com/"&gt;StaticGen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Hmm, it looks like Lektor also has support for Github pages.&lt;/p&gt;</content></entry><entry><title>Learning git and github</title><link href="https://tingox.github.io/learning-git-and-github.html" rel="alternate"></link><published>2017-08-31T13:45:46+02:00</published><updated>2017-08-31T13:45:46+02:00</updated><author><name>Torfinn Ingolfsen</name></author><id>tag:tingox.github.io,2017-08-31:/learning-git-and-github.html</id><summary type="html">&lt;p&gt;I am just learning about git, github and so on. Nothing interesting here.&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am just learning about git, github and so on. Nothing interesting here.&lt;/p&gt;</content></entry></feed>